from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot.database import get_db
from bot.handlers.portfolio import PortfolioStates, show_project
from bot.models import PortfolioItem, User, Contact
from bot.config.settings import settings
from bot.keyboards.reply import get_admin_keyboard, main_kb
import os
from datetime import datetime
router = Router()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    return user_id in settings.ADMIN_UID


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
def get_cancel_delete_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="cancel_delete")]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
    return builder.as_markup(resize_keyboard=True)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
class AddPortfolioState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_photo = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
class DeletePortfolioState(StatesGroup):
    waiting_for_project_id = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
class BroadcastState(StatesGroup):
    waiting_for_message = State()
    waiting_for_confirmation = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
class EditContactsState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_address = State()
    waiting_for_website = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("admin"))
@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message, state: FSMContext | None = None):
    if state:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ

    if not is_admin(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    await message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def add_project_command(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddPortfolioState.waiting_for_title)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.message(
    AddPortfolioState.waiting_for_title,
    F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
)
@router.message(
    AddPortfolioState.waiting_for_description,
    F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
)
@router.message(
    AddPortfolioState.waiting_for_photo,
    F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
)
async def cancel_add_project(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )


# –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
@router.message(AddPortfolioState.waiting_for_title, F.text)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(AddPortfolioState.waiting_for_description)


# –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
@router.message(AddPortfolioState.waiting_for_description, F.text)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(AddPortfolioState.waiting_for_photo)


# –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞
@router.message(AddPortfolioState.waiting_for_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs("uploads/portfolio", exist_ok=True)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await message.bot.get_file(file_id)
    ext = file.file_path.split(".")[-1]
    filename = f"uploads/portfolio/{datetime.now().strftime('%Y%m%d%H%M%S')}.{ext}"
    await message.bot.download_file(file.file_path, filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    project = PortfolioItem(
        title=data['title'],
        description=data['description'],
        image_url=filename
    )
    db.add(project)
    db.commit()

    await message.answer(
        "‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def start_deleting_project(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    db = next(get_db())
    projects = db.query(PortfolioItem).all()

    if not projects:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_admin_keyboard())
        return

    projects_list = "\n".join([f"{p.id}: {p.title}" for p in projects])
    await message.answer(
        f"üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n{projects_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã:",
        reply_markup=get_cancel_delete_keyboard()
    )
    await state.set_state(DeletePortfolioState.waiting_for_project_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_project(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await admin_panel(callback.message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(DeletePortfolioState.waiting_for_project_id, F.text.regexp(r'^\d+$'))
async def process_delete_project(message: types.Message, state: FSMContext):
    db = next(get_db())
    project_id = int(message.text)
    project = db.query(PortfolioItem).filter(PortfolioItem.id == project_id).first()

    if not project:
        await message.answer("‚ùå –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_admin_keyboard())
        return

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        if os.path.exists(project.image_url):
            os.remove(project.image_url)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –ë–î
    db.delete(project)
    db.commit()

    await message.answer(
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project.title}' —É–¥–∞–ª–µ–Ω!",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
async def show_projects_list(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    db = next(get_db())
    projects = db.query(PortfolioItem).all()

    if not projects:
        await message.answer("‚ÑπÔ∏è –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ–µ.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —á—Ç–æ –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await state.update_data(
        projects=[p.__dict__ for p in projects],
        current_index=0,
        total_items=len(projects)
    )
    await state.set_state(PortfolioStates.viewing)
    await show_project(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_broadcast(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    await message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(BroadcastState.waiting_for_message)


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å / –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
@router.message(BroadcastState.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if message.photo:
        await state.update_data(
            photo=message.photo[-1].file_id,
            caption=message.caption,
            has_photo=True
        )
    else:
        await state.update_data(
            text=message.text,
            has_photo=False
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
    ])

    if message.photo:
        await message.answer_photo(
            photo=message.photo[-1].file_id,
            caption=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{message.caption or ''}",
            reply_markup=confirm_keyboard
        )
    else:
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{message.text}",
            reply_markup=confirm_keyboard
        )

    await state.set_state(BroadcastState.waiting_for_confirmation)


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
@router.callback_query(BroadcastState.waiting_for_confirmation, F.data == "confirm_broadcast")
async def confirm_broadcast(message: types.Message, callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    data = await state.get_data()
    db = next(get_db())
    users = db.query(User).all()
    success = 0
    errors = 0

    for user in users:
        try:
            if data.get('has_photo'):
                await callback.bot.send_photo(
                    chat_id=user.user_id,
                    photo=data['photo'],
                    caption=data.get('caption', '')
                )
            else:
                await callback.bot.send_message(
                    chat_id=user.user_id,
                    text=data['text']
                )
            success += 1
        except Exception as e:
            errors += 1
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {errors}",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )
    await state.clear()


# –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
@router.callback_query(BroadcastState.waiting_for_confirmation, F.data == "cancel_broadcast")
async def cancel_broadcast(message: types.Message, callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )
    await state.clear()


@router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def start_edit_contacts(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EditContactsState.waiting_for_phone)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@router.message(
    EditContactsState.waiting_for_phone,
    F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
)
@router.message(
    EditContactsState.waiting_for_email,
    F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
)
@router.message(
    EditContactsState.waiting_for_address,
    F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
)
@router.message(
    EditContactsState.waiting_for_website,
    F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
)
async def cancel_edit_contacts(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞
@router.message(EditContactsState.waiting_for_phone, F.text)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ email:")
    await state.set_state(EditContactsState.waiting_for_email)


@router.message(EditContactsState.waiting_for_email, F.text)
async def process_email(message: types.Message, state: FSMContext):
    if "@" not in message.text:  # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(email=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    await state.set_state(EditContactsState.waiting_for_address)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—è —Å—Å—ã–ª–∫–∏
@router.message(EditContactsState.waiting_for_address, F.text)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç:")
    await state.set_state(EditContactsState.waiting_for_website)


@router.message(EditContactsState.waiting_for_website, F.text)
async def process_website(message: types.Message, state: FSMContext):
    contact_data = await state.get_data()
    db = next(get_db())

    contacts = db.query(Contact).first()
    if contacts:
        contacts.phone = contact_data['phone']
        contacts.email = contact_data['email']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
        contacts.address = contact_data['address']
        contacts.website = message.text
    else:
        contacts = Contact(
            phone=contact_data['phone'],
            email=contact_data['email'],  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            address=contact_data['address'],
            website=message.text
        )
        db.add(contacts)

    db.commit()

    await message.answer(
        "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact_data['phone']}\n"
        f"Email: {contact_data['email']}\n"
        f"–ê–¥—Ä–µ—Å: {contact_data['address']}\n"
        f"–°–∞–π—Ç: {message.text}",
        reply_markup=get_admin_keyboard(message.from_user.id)
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@router.message(F.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_kb(message.from_user.id)
    )


@router.message(Command("admin_add"))
async def add_admin(message: types.Message):
    if message.from_user.id != settings.ADMIN_UID[0]:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    try:
        new_admin_id = int(message.text.split()[1])
        if new_admin_id in settings.ADMIN_UID:
            return await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

        settings.ADMIN_UID.append(new_admin_id)
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        with open(".env", "a") as f:
            f.write(f",{new_admin_id}")

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_add <user_id>")


@router.message(Command("admin_remove"))
async def remove_admin(message: types.Message):
    if message.from_user.id != settings.ADMIN_UID[0]:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    try:
        admin_id = int(message.text.split()[1])
        if admin_id not in settings.ADMIN_UID:
            return await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

        settings.ADMIN_UID.remove(admin_id)
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        with open(".env", "r+") as f:
            lines = f.readlines()
            f.seek(0)
            for line in lines:
                if line.startswith("ADMIN_UIDS="):
                    line = f"ADMIN_UIDS={','.join(map(str, settings.ADMIN_UIDS))}\n"
                f.write(line)
            f.truncate()

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_remove <user_id>")


@router.message(Command("admin_list"))
@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def list_admins(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    admins_list = "\n".join(f"üëâ {uid}" for uid in settings.ADMIN_UID)
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n{admins_list}")
